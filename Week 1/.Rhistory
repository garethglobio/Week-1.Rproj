# Week 1
getwd()
help(mean)
args(mean)
# a grades vector
grades <- c(8.5, 7, 9, 5.5, 6)
# calculate the mean of grades using matching by name
mean(grades)
# calculate the mean of grades using matching by name
mean(x = grades)
# calculate the mean of grades using matching by position
mean(grades)
grades <- c(8.5, 7, 9, NA, 6)
mean(grades, na.rm = TRUE)
mean(grades)
# make a function called multiply_a_b
multiply_a_b <- function(a, b){
return (a * b)
}
a = 3
b = 7
multiply_a_b(a, b)
result <- multiply_a_b(a, b)
print(result)
cars <- read.csv('mtcars.csv')
head(cars)
cars <- read.csv('http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars.csv')
head(cars)
cars <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars_semicolon.csv", sep = "\t")
head(cars)
cars <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars_semicolon.csv", sep = ";")
head(cars)
list.files()
library(ggplot2)
require(ggplot2)
# Checking the dimensions of your data
cars <- read.csv('mtcars.csv')
dim(cars)
# Data Structure
str(cars)
# Levels
levels(cars$am)
cars <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/course/uva/mtcars_semicolon.csv", sep = ";")
head(cars)
# Recoding Variables
# Assign the value of mtcars to the new variable mtcars2
mtcars2 <- read.csv("mtcars.csv")
# Assign the label "high" to mpgcategory where mpg is greater
# than or equal to 20
mtcars$mpgcategory[mtcars2$mpg >= 20] <- "high"
# Assign the label "low" to mpgcategory where mpg is less than 20
mtcars$mpgcategory[mtcars2$mpg < 20] <- "low"
#Assign mpgcategory as factor to mpgfactor
mtcars2$mpgfactor <- as.factor(mtcars2$mpgcategory)
head(mtcars2)
# Assign the label "high" to mpgcategory where mpg is greater
# than or equal to 20
mtcars2$mpgcategory[mtcars2$mpg >= 20] <- "high"
# Assign the label "low" to mpgcategory where mpg is less than 20
mtcars2$mpgcategory[mtcars2$mpg < 20] <- "low"
#Assign mpgcategory as factor to mpgfactor
mtcars2$mpgfactor <- as.factor(mtcars2$mpgcategory)
head(mtcars2)
# Examining Frequencies
# #How many of the cars have a manual transmission?
table(mtcars2$am)
# Cumulative Frequency
table(mtcars2$gear)
length(mtcars2[mtcars2$gear == 2 || mtcars2$gears == 5])
length(mtcars2[mtcars2$gear == 2 | mtcars2$gears == 5])
length(mtcars2[mtcars2$gear == 2 | mtcars2$gears == 5]) / length(mtcars2$gear)
mtcars2[mtcars2$gear == 2 | mtcars2$gears == 5]
head(mtcars2[mtcars2$gear == 2 | mtcars2$gears == 5])
mtcars2$gear[mtcars2$gear == 2 | mtcars2$gears == 5])
mtcars2$gear[mtcars2$gear == 2 | mtcars2$gears == 5]
mtcars2$gear
mtcars2$gear == 3
mtcars2$gear[mtcars2$gear == 3]
lenght(mtcars2$gear[mtcars2$gear == 3])
length(mtcars2$gear[mtcars2$gear == 3])
length(mtcars2$gear[mtcars2$gear == 3]) + lenght(mtcars3$gear[mtcars2$gear == 5])
length(mtcars2$gear[mtcars2$gear == 3]) + length(mtcars3$gear[mtcars2$gear == 5])
length(mtcars2$gear[mtcars2$gear == 3]) + length(mtcars2$gear[mtcars2$gear == 5])
(length(mtcars2$gear[mtcars2$gear == 3]) + length(mtcars2$gear[mtcars2$gear == 5])) / lenght(mtcars2$gear)
(length(mtcars2$gear[mtcars2$gear == 3]) + length(mtcars2$gear[mtcars2$gear == 5])) / length(mtcars2$gear)
(length(mtcars2$gear[mtcars2$gear == 3]) +
length(mtcars2$gear[mtcars2$gear == 5])) /
length(mtcars2$gear)
((length(mtcars2$gear[mtcars2$gear == 3]) +
length(mtcars2$gear[mtcars2$gear == 5])) /
length(mtcars2$gear)) * 100
# Making a Bar Graph
# Assign the frequency of the mtcars variable "am" to
# a variable called "height"
height <- table(mtcars2$am)
# Create a barplot of "height"
barplot(height)
# Make a vector of the names of the bars called "barnames"
barnames <- c("automatics", "manual")
# Label the y axis "number of cars" and label the bars
# using barnames
barplot(height, ylab = "number of cars", names.arg = barnames)
# Histograms
# Make a histogram of the carb variable from the mtcars data set.
# Set the title to "Carburetors"
hist(mtcars2$carb, main = "Carbeuretors")
# Formatting Your Histogram
# arguments to change the y-axis scale to 0 - 20,
# label the x-axis and colour the bars red
hist(mtcars$carb, main = "Carburetors", ylim = c(0, 20),
xlab = "Number of Carburetors")
# Formatting Your Histogram
# arguments to change the y-axis scale to 0 - 20,
# label the x-axis and colour the bars red
hist(mtcars2$carb, main = "Carburetors", ylim = c(0, 20),
xlab = "Number of Carburetors")
# Formatting Your Histogram
# arguments to change the y-axis scale to 0 - 20,
# label the x-axis and colour the bars red
hist(mtcars2$carb, main = "Carburetors", ylim = c(0, 20),
col = "blue", xlab = "Number of Carburetors")
# Mean and Median
# Calculate the mean miles per gallon
mean(mtcars2$mpg)
# Calculate the median miles per gallon
median(mtcars2$mpg)
# Mode
sort(table(mtcars2$carb))
# Mode
sort(table(mtcars2$carb), decreasing = TRUE)
# Range
# Minimum value
x <- min(mtcars2$mpg)
# Maximum value
y <- max(mtcars2$mpg)
#  Calculate the range of mpg using x and y
y - x
# Quartiles
quantile(mtcars2$qsec)
# IQR and boxplot
boxplot(mtcars2$qsec)
# IQR and boxplot
# Make a boxplot of qsec
boxplot(mtcars2$qsec)
# Calculate the interquartile range of qsec
IQR(mtcars2$qsec)
# IQR outliers
# What is the threshold value for an outlier below the
# first quartile?
min(mtcars2$qsec)
# IQR outliers
# What is the threshold value for an outlier below the
# first quartile?
min(mtcars2$qsec) - 1.5 * IQR(mtcars2$qsec)
# What is the threshold value for an outlier above the
# third quartile?
max(mtcars2$qsec) - 1.5 * IQR(mtcars2$qsec)
# What is the threshold value for an outlier above the
# third quartile?
max(mtcars2$qsec) + 1.5 * IQR(mtcars2$qsec)
# tandard Deviation
# Find the IQR of horsepower
IQR(mtcars2$hp)
# Find the standard deviation of horsepower
sd(mtcars2$hp)
# Find the IQR of miles per gallon
IQR(mtcars2$mpg)
# Find the standard deviation of miles per gallon
sd(mtcars2$mpg)
# Calculating Z-scores
(mtcars2$mpg - mean(mtcars2$mpg)) / sd(mtcars2$mpg)
print(100, "%")
print(100 + "%")
print(cat(100, "%"))
factorial(10)
factorial(0)
factorial(16) / (factorial(14) * factorial(20-14))
factorial(20) / (factorial(14) * factorial(20-14))
factorial(20) / (factorial(6) * factorial(20 = 6))
factorial(20) / (factorial(6) * factorial(20 = 6))
factorial(20) / (factorial(6) * factorial(20 - 6))
factorial(14) / (factorial(10) * factorial(14 - 10))
factorial(14) / (factorial(9) * factorial(14 - 9))
factorial(20) / (factorial(14) * factorial(20 - 14))
(1/5)^14 * (4/5)^6
(1/5)^14
(0.25)^9 * (0.75)^5
(factorial(14) / (factorial(9) * factorial(14 - 9))) * (1/4)^9 * (3/4)^5
(factorial(20) / (factorial(14) * factorial(20 - 14))) * (1/5)^14 * (4/5)^6
0.55 + 0.45 + 0.4 - 0.25 - 0.2 - 0.15 + 0.1
0.25 + 0.2 + 0.15 - 0.1
factorial(5) / (factorial(3) * factorial(2))
3^5
0.55 + 0.45 + 0.4 - 0.1 - 0.2 - 0.15 - 0.25
4 / 243
factorial(2) + factorial(3) + factorial(4) + factorial(5)
factorial(2) + factorial(3) + factorial(4) + factorial(5) + factorial(1)
153/243
factorial(5) / (factorial(3) * factorial(2))
factorial(5) / (factorial(4) * factorial(1))
factorial(5) / (factorial(2) * factorial(3))
factorial(5) / factorial(4)
25 / 243
factorial(5) / (factorial(2) * factorial(3))
30 / 243
(factorial(5) / (factorial(2) * factorial(3))) * 8
(factorial(5) / (factorial(3) * factorial(2))) * 4
(factorial(5) / (factorial(4) * factorial(1))) * 2
(factorial(5) / (factorial(4) * factorial(1))) * 16
80 + 40 + 10 + 80 + 1
211 / 243
80 + 80 + 10
170 / 243
0.55 - 0.2 - 0.25 - 0.1
0.55 - (0.2 - 0.25) + 0.1
0.55 - (0.2 + 0.25) + 0.1
(factorial(5) / (factorial(3) * factorial(2))) * 4
(factorial(5) / (factorial(4) * factorial(1))) * 8
